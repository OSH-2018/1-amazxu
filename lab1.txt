调式过程

系统环境/工具：
    ubuntu 17.04
    linux_4.1.51
    qemu-img version 2.5.0
    GNU gdb 7.12.50
    gcc 6.3.0
    make 4.1
实验步骤：
    1.git一个linux内核
      我先在kernel.org上面下载了一个4.1.51版本的内核，下载下来的是一个 .tar.xz 文件，用 tar xvJf  ***.tar.xz 命令来解压，解压后进入linux文件夹
    2.编译内核
      2.1首先创建x86_64的默认内核配置：make x86_64_defconfig，再手动设置内核选项：make menuconfig 。解决这一步的时候花了较长时间，其中最关键的点：
        1）menuconfig本身的是缺少一个头文件的，必须要再下载一个包“ncurses-devel”，但是在sudo时，找不到这个包，以为是源的问题，但在ubuntu下，“ncurses-devel”更新为“libncurses5-dev”，这才解决。
        2）aptitude install:包与包之间存在依赖关系，在安装“libncurses5-dev”时，另外三个包的版本超前了，用这个命令install的时候，它会提供解决方案，我采用了第二种解决方案（网上说一般采用后面的几种方案）安装完成后，make menuconfig 成功。
      2.2更改.config文件。
	1）进入Processor type and features，取消Build a relocatable kernel。内核启用这项特性之后，内核启动时会随机化内核的各个 section 的虚拟地址（VA），导致 gdb 断点设置在错误的虚拟地址上，内核执行时就不会触发这些断点，Kernel hacking所以要禁止。
        2）进入Kernel hacking -> Compile-time checks and compiler options，选择两项
    		*Compile the kernel with debug info
        	    *Generate dwarf4 debuginfo
    		*Compile the kernel with frame pointers
	方便 gdb 调试。可参考 dwarf4 格式。
      2.3编译

	make -j 8 （8个CPU核）

	等待后，内核镜像在./arch/x86/boot/bzImage
    3.调试内核
      3.1 qemu测试

        qemu-system-x86_64 -m 2048 -kernel ./arch/x86/boot/bzImage -s -S -nographic -serial mon:stdio -append "console=ttyS0"

	2048是我的内存数量，-kernel 后面跟镜像路径，-s监听1234端口，用于gdb连接，-S 加载qemu之后暂停，等待gdb，不然内核会一直执行下去，-nographic输出日志。
      3.2 gdb调试
	重新打开一个终端

	gdb vmlinux ,内核编译的时候会产生调试文件vmlinux
	show arch，看一下当先的架构
	target remote :1234，之前已经设置好了1234端口，开始连接qemu进行调试
	b start_kernel
	b xxx	，设置断点
	c，执行

	在执行的时候，会报错“Remote 'g' packet reply is too long: ff00584531daddff...”，先断开gdb的连接，再重新设置arch “set arch i386:x86-64:intel”，重新连接 target remote :1234，然后按照gdb的指令调试就好了
    4.关键事件 
      4.1 start_kernel()
      相关函数
	1.1 lock_kernel() 获得big kernel lock
	1.2 setup_arch() 体系相关的初始化工作
	  1.2.1 setup_architecture(machine_arch_type) 获得体系结构的信息
	  1.2.2 bootmem_init (&meminfo) 据meminfo进行内存结构初始化
	  1.2.3 paging_init(&meminfo, mdesc) 创建内核页表
	  **MMU的实现过程，实际上就是一个查表映射的过程，映射分为一级页表的变换和二级页表变换**
	1.3 parse_options() 分析启动选项
	1.4 trap_init() (/kernel/traps.c do_trap) 体系相关的中断处理的初始化
	1.5 init_IRQ() 体系相关的irq处理的初始化
	1.6 sched_init() 初始化系统调度进程
	1.7 softirq_init() 内核的软中断机制初始化函数
	1.8 time_init() 系相关的timer的初始化
	1.9 console_init() 控制台初始化
	1.10 init_modules() 模块初始化
	1.11 kmem_cache_init() 内核Cache初始化
	1.12 sti() 使能中断
	1.13 calibrate_delay() 近似计算BogoMIPS数字
	1.14 kmem_cache_sizes_init() 内核内存管理器的初始化
	1.15 pgtable_cache_init() 页表cache初始化
	1.16 fork_init() 计算出当前系统的物理内存容量能够允许创建的进程(线程)数量
	1.17 proc_caches_init() 为proc文件系统创建高速缓冲
	1.18 vfs_caches_init(num_physpages) 为VFS创建SLAB高速缓冲
	1.19 buffer_init(num_physpages) 初始化buffer 
	1.20 page_cache_init(num_physpages)  页缓冲初始化 
	1.21 signals_init() 创建信号队列高速缓冲 
	1.22 proc_root_init() 在内存中创建包括根结点在内的所有节点 
	1.23 check_bugs() 检查与处理器相关的bug 
	1.24 smp_init() 启动各个AP
	1.25 rest_init() 完成剩余部分
      在start_kernel函数执行之前，会先执行head-armv.S文件，用来检查CPU ID，Architecture Type，对BSS进行初始化等操作，在执行前，处理器应满足以下状态： 
	r0 	- should be 0 
    	r1 	- unique architecture number 
    	MMU 	- off 
    	I-cache - on or off 
    	D-cache - off 

      4.2 paging_init(&meminfo, mdesc)
	用 b paging_init 设置断点，找到函数的位置，可以看到其上下段代码

	645		memblock_set_node(0, (phys_addr_t)ULLONG_MAX, &memblock.memory, 0);
	646	}
	647	#endif
	648	
	649	void __init paging_init(void)
	650	{
	651		sparse_memory_present_with_active_regions(MAX_NUMNODES);
	652		sparse_init();
	653	
	654		/*
	此函数用来创建内核页表，映射所有物理内存和IO空间，对于不同的处理器，该函数差别比较大
      
      4.3 init_IRQ() 
	用同样的方法，可以定位 init_IRQ() 
	void __init init_IRQ(void) 
	{ 
	extern void init_dma(void); 
	int irq; 

	for (irq = 0; irq < NR_IRQS; irq++) { 
	irq_desc[irq].probe_ok = 0; 
	irq_desc[irq].valid = 0; 
	irq_desc[irq].noautoenable = 0; 
	irq_desc[irq].mask_ack = dummy_mask_unmask_irq; 
	irq_desc[irq].mask = dummy_mask_unmask_irq; 
	irq_desc[irq].unmask = dummy_mask_unmask_irq; 
		} 
	CSR_WRITE(AIC_MDCR, 0x7FFFE); 	/* disable all interrupts */ 
	CSR_WRITE(CAHCNF,0x0);		/*Close Cache*/ 
	CSR_WRITE(CAHCON,0x87);		/*Flush Cache*/ 
	while(CSR_READ(CAHCON)!=0); 
	CSR_WRITE(CAHCNF,0x7);	/*Open Cache*/ 

	init_arch_irq(); 
	init_dma(); 
	}

	其中 irq_desc数组是用来描述IRQ的请求队列，每一个中断号分配一个irq_desc结构，组成了一个数组，NR_IRQS表示中断数目，这里是对结构irq_desc进行初始化
	init_arch_irq()对irq_desc进行了实质的初始化，接下来执行init_dma（）函数
      4.4 sched_init() 
	7140	#endif
	7141	
	7142	DECLARE_PER_CPU(cpumask_var_t, load_balance_mask);
	7143	
	7144	void __init sched_init(void)
	7145	{
	7146		int i, j;
	7147		unsigned long alloc_size = 0, ptr;
	7148	
	7149	#ifdef CONFIG_FAIR_GROUP_SCHED

	初始化系统调度进程，主要对定时器机制和时钟中断的Bottom Half的初始化函数进行设置
	
      4.5 softirq_init() 
	630		ttimer->function = function;
	631	}
	632	EXPORT_SYMBOL_GPL(tasklet_hrtimer_init);
	633	
	634	void __init softirq_init(void)
	635	{
	636		int cpu;
	637	
	638		for_each_possible_cpu(cpu) {
	639			per_cpu(tasklet_vec, cpu).tail =
	
	内核的软中断机制初始化函数，初始化tasklet_struct结构，在它调用tasklet_init()以后，它们的函数指针func全都指向bh_action()
	
	4.6 time_init() 
	
	90	/*
	91	 * Initialize TSC and delay the periodic timer init to
	92	 * late x86_late_time_init() so ioremap works.
	93	 */
	94	void __init time_init(void)
	95	{
	96		late_time_init = x86_late_time_init;
	97	}
	
	该段代码可在arch/armnommu/kernel/time.c里面找到，用来初始化event timer

	4.7 console_init() 

	3566	 * we can't necessarily depend on lots of kernel help here.
	3567	 * Just do some early initializations, and do the complex setup
	3568	 * later.
	3569	 */
	3570	void __init console_init(void)
	3571	{
	3572		initcall_t *call;
	3573	
	3574		/* Setup the default TTY line discipline. */
	3575		tty_ldisc_begin();

	控制台初始化。，提前到该处完成初始化，主要是为了提前看到输出信息，据此判断内核运行情况，也完成一些早期的初始化

	4.8 rest_init(); 
	
	379	 */
	380	
	381	static __initdata DECLARE_COMPLETION(kthreadd_done);
	382	
	383	static noinline void __init_refok rest_init(void)
	384	{
	385		int pid;
	386	
	387		rcu_scheduler_starting();
	388		smpboot_thread_init();
	
	这个函数调用了kernel_thread(init, NULL, CLONE_FS | CLONE_FILES | CLONE_SIGNAL)函数，后者可以在arch/armnommu/kernel/process.c 中找到，通过__syscall(clone)（可在armnommu/kernel目录下的entry- common.S文件中找到） 创建新线程
	在内核引导结束并启动init之后，系统就转入用户的状态运行，至此启动完成
	
	




    
